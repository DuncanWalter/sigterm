import { defineCard, Card, PlayArgs, BasicCardData } from './../card'
import { Damage, targeted } from './../../events/damage'
import { blockable } from '../../events/damage'
import { Creature } from '../../creatures/creature'
import { queryEnemy } from './../utils'
import { DrawCards } from '../../events/drawCards'
import { BindEnergy } from '../../events/bindEnergy'
import { Frailty } from '../../effects/frailty'

type ExploitData = BasicCardData & { damage: number }

export const Exploit: () => Card<ExploitData> = defineCard(
  'exploit',
  playExploit,
  {
    energy: 0,
    damage: 6,
  },
  {
    color: '#ee4422',
    title: 'Exploit',
    text:
      'Deal #{damage} damage. On damaging target with #[Frailty], draw 1 card.',
  }
)

function* playExploit(
  self: Card<ExploitData>,
  { resolver, actors, game, energy }: PlayArgs
): Generator<any, ExploitData, any> {
  let target = yield queryEnemy(game)
  const action: Damage = yield resolver.processEvent(
    new Damage(
      actors,
      target,
      {
        damage: self.data.damage,
      },
      targeted,
      blockable
    )
  )

  if (target.stacksOf(Frailty)) {
    const draw = new DrawCards(actors, game.player, {
      count: 1,
    })
    yield resolver.processEvent(draw)
  }

  return { damage: action.data.damage, energy }
}
